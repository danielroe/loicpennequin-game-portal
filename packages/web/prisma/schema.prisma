datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model User {
    id                     String           @id @unique @default(cuid())
    createdAt              DateTime         @default(now())
    updatedAt              DateTime?        @updatedAt
    email                  String           @unique
    oneTimePassword        String?
    refreshToken           String?          @unique @db.VarChar(200)
    discordId              String?          @unique
    username               String?
    games                  Game[]
    gameSessions           GameSession[]
    sentFriendRequests     FriendRequests[] @relation("sentFriendRequests")
    receivedFriendRequests FriendRequests[] @relation("receivedFriendRequests")
}

enum FriendRequestStatuses {
    PENDING
    ACCEPTED
    REFUSED
}

model FriendRequests {
    sender   User?                 @relation("sentFriendRequests", fields: [senderId], references: [id])
    senderId String
    sendee   User?                 @relation("receivedFriendRequests", fields: [sendeeId], references: [id])
    sendeeId String
    status   FriendRequestStatuses

    @@id([senderId, sendeeId])
}

model Game {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    updatedAt    DateTime?     @updatedAt
    apiKey       String        @unique
    name         String        @unique
    description  String?
    url          String        @unique
    author       User          @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId     String
    gameSessions GameSession[]
    tags         GameTag[]
}

model GameTag {
    id     String  @id @default(cuid())
    label  String
    Game   Game?   @relation(fields: [gameId], references: [id])
    gameId String?
}

model GameSession {
    id        Int       @id @default(autoincrement())
    createdAt DateTime  @default(now())
    updatedAt DateTime? @updatedAt
    game      Game      @relation(fields: [gameId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    gameId    String
    players   User[]
}
